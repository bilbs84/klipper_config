#Macro configuration file

#This is where to place custom macros to keep them out of the printer.cfg file
#Please add comments with macros so you know what the hell you were thinking when you
#look back at these in 6 months time!


#Preheat macro for PLA+ that includes XYZ homing, and setting first layer temperatures.
[gcode_macro pa_tower]
description: Prepare for pressure advance tuning tower print
gcode:
    #Parameters from input
    {% set sta = params.START|default(0)|float %}
    {% set fac = params.FACTOR|default(0.005)|float%}
    #Prepare tuning tower mode, and set to start, and factor.
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
    TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START={sta} FACTOR={fac}
    M118 Tuning tower ready for start of {sta} and a factor of {fac}
    RESPOND TYPE=error MSG='Dont forget to save and or restart after to exit tuning mode!'


[gcode_macro calc_pa]
description: Calculates the required parameters from the pressure advance tuning tower
gcode:

    {% set sta = params.START|int %}
    {% set fac = params.FACTOR|int %}
    {% set hei = params.HEIGHT|int %}
    {% set res = params.START|float + params.HEIGHT|float * params.FACTOR|float %}

    M118 Pressure advance for Start({sta}) + Height({hei}) * Factor({fac}) is {res}


[gcode_macro prep_pla]
description: Prepare for PLA+ Print
gcode:
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=65
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=210
	G28


#I kept forgetting the klipper command to level the bad, so a macro button seemed the logical choice.
[gcode_macro bed_levelling]
description: Manual Bed Leveling
gcode:
	G28
	M117 Adjusting bed screws
	BED_SCREWS_ADJUST

[gcode_macro ringing_test_mzv]
description: Perform ringing tower sest settings with MZS shaper
gcode:
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000
	SET_PRESSURE_ADVANCE ADVANCE=0
	SET_INPUT_SHAPER SHAPER_TYPE=MZV
	TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5
	M117 Ready for tuning tower MZS shaper test.

[gcode_macro ringing_test_ei]
description: Perform ringing tower sest settings with EI shaper
gcode:
	SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000
	SET_PRESSURE_ADVANCE ADVANCE=0
	SET_INPUT_SHAPER SHAPER_TYPE=EI
	TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5
	M117 Ready for tuning tower EI shaper test.

[gcode_macro PWR_OFF]
gcode:
	{action_call_remote_method("set_device_power",
				device="Printer",
				state="off")}

[gcode_macro PWR_ON]
gcode:
	{action_call_remote_method("set_device_power",
				device="Printer",
				state="on")}

[gcode_macro TOGGLE_PC_LIGHT]
gcode:
    {action_call_remote_method("set_device_power",
              device="PC",
              state="toggle")}

[gcode_macro FLASH_PC_LIGHT]
gcode:
    TOGGLE_PC_LIGHT
    G4 P3000
    TOGGLE_PC_LIGHT

[gcode_macro RED_WALL]
gcode:
    {action_call_remote_method("set_device_attributes",
              device="Shapes",
              brightness="50")}

[gcode_macro PRIME_EXTRUDER]
description: Prime the extruder by printing 2 lines near X=0
gcode:
      G92 E0 ;Reset Extruder
      G1 Z2.0 F3000 ;Move Z Axis up
      G1 X5.1 Y20 Z0.28 F5000.0 ;Move to start position
      G1 X5.1 Y200.0 Z0.28 F1500.0 E15 ;Draw the first line
      G1 X5.5 Y200.0 Z0.28 F5000.0 ;Move to side a little
      G1 X5.5 Y20 Z0.28 F1500.0 E30 ;Draw the second line
      G92 E0 ;Reset Extruder
      G1 Z2.0 F3000 ;Move Z Axis up
      G1 X6.5 Y20 Z2 F5000.0 ;Move to the side for blobbing
      G1 Z.5 E0.5
      G1 Z2 E-0.4

[gcode_macro TEST_PARAM]
gcode:
      {% set bedmesh = params.MESH|default(Flex)|string %}
      BED_MESH_CLEAR
      BED_MESH_PROFILE LOAD={bedmesh}

[gcode_macro PRINT_START]
description: Start routine to call from slicer to make it easier to configure multiplse slicers.

gcode:
      # Parameters
      {% set bedtemp = params.BED|int %}
      {% set hotendtemp = params.HOTEND|int %}
      # {% set bedmesh = params.MESH|default(Flex)|string %}
      SETUP_KAMP_MESHING DISPLAY_PARAMETERS=1 LED_ENABLE=1 FUZZ_ENABLE=1
      SETUP_LINE_PURGE DISPLAY_PARAMETERS=1 ADAPTIVE_ENABLE=1
      #G4 P8000
      PWR_ON
      #G4 P2000
      BED_MESH_CLEAR
      G28
      BED_MESH_CALIBRATE
      #Go to bottom left corner, move Z to just above bed to wait for temperature to stabilise
      G92 E0
      G1 X10 Y10 F3000
      G1 Z5 F240
      #Set bed & hotend temperatures
      #M104 S{hotendtemp}
      BEDGLOW
      M190 S{bedtemp}
      HEATERGLOW
      M109 S{hotendtemp}
      NEOPIXEL_DISPLAY LED="top" TYPE=clear
      SET_LED LED=top RED=0 GREEN=1 BLUE=0
      G1 E-1
      G28.1 Z; Final homing on hot build plate
      G90; Absolute Mode
      M83; Extruder relative mode
      # PRIME_EXTRUDER
      LINE_PURGE
      PRINTLIGHT

[gcode_macro G28]
# Only home if needed.
rename_existing: G28.1
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28.1
        G1 X5 Y5 F3000
    {% endif %}

[gcode_macro VOL10]
description: Test 10^3mm/s flow rate

gcode:
  G1 F250
  G1 E20
  G1 F3
  G1 E0.1
  G1 F250
  G1 E100
      
[gcode_macro M600]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}
  {% set default_e = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
    {% if 'bowden_len' in svv %}
      {% set default_e = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set e = params.E|default(default_e)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE_PARK X={x} Y={y} Z={z}
    M702 U{e}
  {% endif %}

[gcode_macro M702]
gcode:
  {% set default_u = 100 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'bowden_len' in svv %}
      {% set default_u = svv.bowden_len %}
    {% endif %}
  {% endif %}

  {% set p = params.P|default(8)|float %}
  {% set p_f = params.PF|default(180)|float %}
  {% set i = params.I|default(30)|float %}
  {% set i_f = params.IF|default(180)|float %}
  {% set u = params.U|default(default_u)|float %}
  {% set u_f = params.UF|default(360)|float %}

  {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("This command cannot be used while printing")}
  {% elif printer.extruder.temperature < 170 %}
    {action_respond_info("Extruder temperature too low")}
  {% else %}
    SAVE_GCODE_STATE NAME=M702_state
    M83
    {% if p > 0.0 %}
      G1 E{p} F{p_f}
    {% endif %}
    {% if i > 0.0 %}
      G1 E-{i} F{i_f}
    {% endif %}
    {% if u > 0.0 %}
      G1 E-{u} F{u_f}
    {% endif %}
    RESTORE_GCODE_STATE NAME=M702_state MOVE=0
  {% endif %}

[gcode_macro PAUSE_PARK]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}
  {% set r = params.R|default(3)|float %}

  {% if printer.pause_resume.is_paused %}
    {action_respond_info("Already paused")}
  {% elif printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    PAUSE
    {% if r > 0.0 %}
      RETRACT D={r}
    {% endif %}
    G27 X{x} Y{y} Z{z}
  {% endif %}

[gcode_macro G27]
gcode:
  {% set default_x = printer.toolhead.axis_minimum.x + 20 %}
  {% set default_y = printer.toolhead.axis_minimum.y + 20 %}

  {% if 'save_variables' in printer %}
    {% set svv = printer.save_variables.variables %}
    {% if 'park_x' in svv %}
      {% set default_x = svv.park_x %}
    {% endif %}
    {% if 'park_y' in svv %}
      {% set default_y = svv.park_y %}
    {% endif %}
  {% endif %}

  {% set x = params.X|default(default_x)|float %}
  {% set y = params.Y|default(default_y)|float %}
  {% set z = params.Z|default(20)|float %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    {action_respond_info("Please home XYZ first")}
  {% else %}
    SAVE_GCODE_STATE NAME=G27_state
    G91
    G1 Z{z}
    G90
    G1 X{x} Y{y} F3000
    RESTORE_GCODE_STATE NAME=G27_state MOVE=0
  {% endif %}

[gcode_macro RETRACT]
gcode:
  {% set f = params.F|default(600)|float %}

  {% if 'D' in params %}
    {% if printer.idle_timeout.state == "Printing" and not printer.pause_resume.is_paused %}
      {action_respond_info("This command cannot be used while printing")}
    {% elif printer.extruder.temperature < 170 %}
      {action_respond_info("Extruder temperature too low")}
    {% else %}
      SAVE_GCODE_STATE NAME=RETRACT_state
      M83
      G1 E-{params.D} F{f}
      RESTORE_GCODE_STATE NAME=RETRACT_state MOVE=0
    {% endif %}
  {% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro lightbar]
description: Turns LEDs on White at 70% brightness
gcode:
	NEOPIXEL_DISPLAY LED="top" TYPE=clear
	SET_LED LED=top RED=.7 GREEN=.7 BLUE=.7

[gcode_macro printlight]
description: Turns LEDs on neutral warm light at full brightness
gcode:
    NEOPIXEL_DISPLAY LED="top" TYPE=clear
    SET_LED LED="top" RED=1 GREEN=0.749 BLUE=0

[gcode_macro heaterglow]
description: Turns light bar on as an indicator for the hotend temperature
gcode:
	NEOPIXEL_DISPLAY LED="top" TYPE=clear
	NEOPIXEL_DISPLAY LED="top" TYPE=extruder_temp MODE=glow

[gcode_macro bedglow]
description: Turns light bar on as an indicator for the bed temperature
gcode:
	NEOPIXEL_DISPLAY LED="top" TYPE=clear
	NEOPIXEL_DISPLAY LED="top" TYPE=bed_temp MODE=glow

[gcode_macro lightoff]
description: Turns light bar off
gcode:
	NEOPIXEL_DISPLAY LED="top" TYPE=clear
	SET_LED LED=top RED=0 GREEN=0 BLUE=0

[gcode_macro lightorange]
description: Turns light bar orange
gcode:
  NEOPIXEL_DISPLAY LED="top" TYPE=clear
  SET_LED LED=top RED=.95 GREEN=0.39 BLUE=0.05

[gcode_macro lightred]
description: Turns light bar red
gcode:
  NEOPIXEL_DISPLAY LED="top" TYPE=clear
  SET_LED LED=top RED=1

[gcode_macro lightgreen]
description: Turns light bar green
gcode:
  NEOPIXEL_DISPLAY LED="top" TYPE=clear
  SET_LED LED=top GREEN=1

[gcode_macro lightblue]
description: Turns light bar blue
gcode:
  NEOPIXEL_DISPLAY LED="top" TYPE=clear
  SET_LED LED=top BLUE=1